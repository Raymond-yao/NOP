{
  "_args": [
    [
      {
        "raw": "json-safe-parse",
        "scope": null,
        "escapedName": "json-safe-parse",
        "name": "json-safe-parse",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Leo/GitHub/NOP(Dev)"
    ]
  ],
  "_from": "json-safe-parse@latest",
  "_id": "json-safe-parse@0.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/json-safe-parse",
  "_npmUser": {
    "name": "bahamas10",
    "email": "dave@daveeddy.com"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-safe-parse",
    "scope": null,
    "escapedName": "json-safe-parse",
    "name": "json-safe-parse",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/json-safe-parse/-/json-safe-parse-0.0.2.tgz",
  "_shasum": "d04754181cf94438c2e6e40f1420eaab3a6bbf82",
  "_shrinkwrap": null,
  "_spec": "json-safe-parse",
  "_where": "/Users/Leo/GitHub/NOP(Dev)",
  "author": {
    "name": "Dave Eddy",
    "email": "dave@daveeddy.com",
    "url": "http://www.daveeddy.com"
  },
  "bugs": {
    "url": "https://github.com/bahamas10/node-json-safe-parse/issues"
  },
  "dependencies": {
    "cleanse": "~0.0.3"
  },
  "description": "Parse JSON and silently ignore or error on reserved keys like hasOwnProperty, toString, etc.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d04754181cf94438c2e6e40f1420eaab3a6bbf82",
    "tarball": "https://registry.npmjs.org/json-safe-parse/-/json-safe-parse-0.0.2.tgz"
  },
  "homepage": "https://github.com/bahamas10/node-json-safe-parse",
  "license": "MIT",
  "main": "./json-safe-parse.js",
  "maintainers": [
    {
      "name": "bahamas10",
      "email": "dave@daveeddy.com"
    }
  ],
  "name": "json-safe-parse",
  "optionalDependencies": {},
  "readme": "JSON Safe Parse\n===============\n\nParse JSON and silently ignore or error on reserved keys like hasOwnProperty,\ntoString, etc.\n\nInstallation\n------------\n\n    npm install json-safe-parse\n\nWhy?\n----\n\n`JSON.parse` is great, but it has one serious flaw in the context of JavaScript:\nit allows you to override inherited properties.  This can become an issue if you\nare parsing JSON from an untrusted source (eg: a user), and calling functions\non it you would expect to exist.\n\nFor example:\n\n``` js\nvar s = '{\"x\": 5, \"toString\": \"foo\"}';\nvar d = JSON.parse(s);\nconsole.log('%s', d);\n```\n\nUnder normal circumstances, this would print `[object Object]`, as the `%s` given\nto `console.log` (which is passed to `util.format`) calls the `toString` method\nof the object given and substitutes in the data returned.\n\nHowever, because `toString` was overridden to be a string, it is now an error to\ncall `toString`, as it is no longer callable.  Running this code results in:\n\n```\nTypeError: Cannot convert object to primitive value\n    at String (<anonymous>)\n    at util.js:39:25\n    at String.replace (native)\n    at Console.exports.format (util.js:35:23)\n    at Console.log (console.js:53:34)\n    at repl:1:9\n    at REPLServer.self.eval (repl.js:110:21)\n    at repl.js:249:20\n    at REPLServer.self.eval (repl.js:122:7)\n    at Interface.<anonymous> (repl.js:239:12)\n```\n\nTake another example that mimics what you might see in a real-world node\nserver, and imagine the JSON being parsed was sent by a user being nefarious.\n\n``` js\nvar s = '{\"id\": 5, \"hasOwnProperty\": \"foo\"}';\nvar d = JSON.parse(s);\nif (!d.hasOwnProperty('id'))\n  console.log('property \"id\" must be supplied');\n```\n\nThe logic is innocent enough; the code is attempting to ensure that the\nuser supplied the `id` key in the data they sent.  However, because the\n\"user\" has overridden the `hasOwnProperty` property, this results in:\n\n```\nTypeError: Property 'hasOwnProperty' of object #<Object> is not a function\n    at repl:1:8\n    at REPLServer.self.eval (repl.js:110:21)\n    at repl.js:249:20\n    at REPLServer.self.eval (repl.js:122:7)\n    at Interface.<anonymous> (repl.js:239:12)\n    at Interface.EventEmitter.emit (events.js:95:17)\n    at Interface._onLine (readline.js:202:10)\n    at Interface._line (readline.js:531:8)\n    at Interface._ttyWrite (readline.js:760:14)\n    at ReadStream.onkeypress (readline.js:99:10)\n```\n\n---\n\nIn both of the examples given above, fatal errors were thrown that were not caught,\nwhich would result in the node program terminating.\n\nHow\n---\n\nThis module is not a reimplementation of `JSON.parse`, in fact, this module uses\n`JSON.parse`, and then \"cleans up\" any keywords that have been overridden.\n\nMore importantly, this module does not have a hardcoded list of reserved\nkeywords or inherited properties.  Instead, it looks inside an empty object\nto figure out which keywords are inherited, and which are safe to use.  That\nmeans this module will continue to work even if in the future it is decided\nthat more properties will be attached to the `Object` prototype and thus\nmade reserved.\n\nI liked the way [JSON5-utils](https://github.com/rlidwka/json5-utils)\nhandled this problem, but I didn't want to have to use a separate JSON\nparser just to get this functionality.\n\nThis module provides a safe mechanism for parsing JSON, without implementing or\nrecreating a JSON parser.\n\nThe object is cleansed using this module https://github.com/bahamas10/node-cleanse\n\nUsage\n-----\n\n``` js\nvar jsonsafeparse = require('json-safe-parse');\n```\n\n`jsonsafeparse` has the same usage as `JSON.parse` and is fully backwards\ncompatible.\n\n``` js\n// works just like JSON.parse\njsonsafeparse('{\"x\": 5}') == {x: 5}\n```\n\n### `jsonsafeparse(string, behavior='ignore')`\n\n- `behavior`: specifies what to do with reserved keys\n  - `ignore`: (default) silently discard reserved keys\n  - `throw`: throw an error at the first reserved key found\n  - `replace`: do nothing, this makes this function effectively the same as `JSON.parse`\n\n\n``` js\n// works just like JSON.parse but ignores reserved keywords; ignore\n// is the default behavior\njsonsafeparse('{\"x\": 5, \"hasOwnProperty\": \"foo\"}');\n// => {x: 5}\njsonsafeparse('{\"x\": 5, \"hasOwnProperty\": \"foo\"}', 'ignore')\n// => {x: 5}\n\n// throw will cause a SyntaxError to be thrown\njsonsafeparse('{\"x\": 5, \"hasOwnProperty\": \"foo\"}', 'throw')\n// => SyntaxError: reserved keyword \"hasOwnProperty\" found in object\n\n// replace will make it act like JSON.parse (unsafe)\njsonsafeparse('{\"x\": 5, \"hasOwnProperty\": \"foo\"}', 'replace')\n// => {x: 5, \"hasOwnProperty\": \"foo\"}\n```\n\n### `jsonsafeparse.cleanse(obj, behavior='ignore')`\n\nThe function found in https://github.com/bahamas10/node-cleanse\n\nSame as above, but this function takes a JavaScript object (or array,\nstring, etc.) that has already been parsed.  The behavior can be `ignore`\nor `throw` for the cleanse method; `replace` is only relevant for the\n`jsonsafeparse` function.\n\nThis is useful for objects that have already been parsed for you,\nsuch as the output of `querystring.parse`, `req.headers`, `process.env`, etc.\n\nie\n\n``` js\n// strip out any reserved keywords from the headers object\n// .cleanse() returns a reference to the original object, as it\n// is fixed inplace\nreq.headers = jsonsafeparse.cleanse(req.headers);\n// same as\njsonsafeparse.cleanse(req.headers);\n\n// strip out any reserved keywords from environmental variables\njsonsafeparse.cleanse(process.env);\n```\n\nExample\n-------\n\nThe tool `examples/cli.js` in this repo is used to see what JSON\nwill look like after its reserved keys have been stripped\n\n`example.json`\n\n``` json\n{\n  \"whois\": \"John Galt?\",\n  \"toString\": \"a Prometheus who changed his mind\",\n  \"hasOwnProperty\": true,\n  \"missing\": true,\n  \"location\": null,\n  \"employment\": [\n    \"20th Century Motor Company\",\n    \"Taggart Transcontinental\"\n  ],\n  \"education\": [\n    {\n      \"school\": \"Patrick Henry University\",\n      \"toString\": \"PHU\",\n      \"years\": 4,\n      \"majors\": [\n        \"physics\",\n        \"philosophy\"\n      ]\n    }\n  ]\n}\n```\n\n    $ node ./examples/cli.js < example.json\n\nresults in:\n\n``` json\n{\n  \"whois\": \"John Galt?\",\n  \"missing\": true,\n  \"location\": null,\n  \"employment\": [\n    \"20th Century Motor Company\",\n    \"Taggart Transcontinental\"\n  ],\n  \"education\": [\n    {\n      \"school\": \"Patrick Henry University\",\n      \"years\": 4,\n      \"majors\": [\n        \"physics\",\n        \"philosophy\"\n      ]\n    }\n  ]\n}\n```\n\nBenchmarks\n----------\n\nOn average, `jsonsafeparse` is half as fast as `JSON.parse`.\n\n    $ node benchmark/benchmark.js\n    testing with the following JSON\n    {\"hasOwnProperty\": 5, \"x\": \"foo\"}\n\n    JSON.parse()    1000000x\n    => took 609 ms\n\n    jsonsafeparse() 1000000x\n    => took 1232 ms\n\n    ===> jsonsafeparse was 49.43% as fast as JSON.parse()\n\n    testing with the following JSON\n    {\n      \"whois\": \"John Galt?\",\n      \"toString\": \"a Prometheus who changed his mind\",\n      \"hasOwnProperty\": true,\n      \"missing\": true,\n      \"location\": null,\n      \"employment\": [\n        \"20th Century Motor Company\",\n        \"Taggart Transcontinental\"\n      ],\n      \"education\": [\n        {\n          \"school\": \"Patrick Henry University\",\n          \"toString\": \"PHU\",\n          \"years\": 4,\n          \"majors\": [\n            \"physics\",\n            \"philosophy\"\n          ]\n        }\n      ]\n    }\n\n    JSON.parse()    1000000x\n    => took 6875 ms\n\n    jsonsafeparse() 1000000x\n    => took 13340 ms\n\n    ===> jsonsafeparse was 51.54% as fast as JSON.parse()\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bahamas10/node-json-safe-parse.git"
  },
  "scripts": {
    "test": "for f in test/*; do echo \"$f\"; node \"$f\" || exit 1; done; echo Passed; exit 0"
  },
  "version": "0.0.2"
}
