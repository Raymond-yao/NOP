{
  "_args": [
    [
      {
        "raw": "cleanse@~0.0.3",
        "scope": null,
        "escapedName": "cleanse",
        "name": "cleanse",
        "rawSpec": "~0.0.3",
        "spec": ">=0.0.3 <0.1.0",
        "type": "range"
      },
      "/Users/Leo/GitHub/NOP(Dev)/node_modules/json-safe-parse"
    ]
  ],
  "_from": "cleanse@>=0.0.3 <0.1.0",
  "_id": "cleanse@0.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/cleanse",
  "_npmUser": {
    "name": "bahamas10",
    "email": "dave@daveeddy.com"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cleanse@~0.0.3",
    "scope": null,
    "escapedName": "cleanse",
    "name": "cleanse",
    "rawSpec": "~0.0.3",
    "spec": ">=0.0.3 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-safe-parse"
  ],
  "_resolved": "https://registry.npmjs.org/cleanse/-/cleanse-0.0.3.tgz",
  "_shasum": "e12ed49102d268ea017a5ca4803406dc8d238c05",
  "_shrinkwrap": null,
  "_spec": "cleanse@~0.0.3",
  "_where": "/Users/Leo/GitHub/NOP(Dev)/node_modules/json-safe-parse",
  "author": {
    "name": "Dave Eddy",
    "email": "dave@daveeddy.com",
    "url": "http://www.daveeddy.com"
  },
  "bugs": {
    "url": "https://github.com/bahamas10/node-cleanse/issues"
  },
  "dependencies": {},
  "description": "Remove reserved keys like hasOwnProperty, toString, etc. on objects recursively",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e12ed49102d268ea017a5ca4803406dc8d238c05",
    "tarball": "https://registry.npmjs.org/cleanse/-/cleanse-0.0.3.tgz"
  },
  "homepage": "https://github.com/bahamas10/node-cleanse",
  "keywords": [
    "cleanse",
    "hasOwnProperty",
    "reserved",
    "toString",
    "prototype"
  ],
  "license": "MIT",
  "main": "./cleanse.js",
  "maintainers": [
    {
      "name": "bahamas10",
      "email": "dave@daveeddy.com"
    }
  ],
  "name": "cleanse",
  "optionalDependencies": {},
  "readme": "Cleanse\n=======\n\nRemove reserved keys like hasOwnProperty, toString, etc. on objects recursively\n\nInstallation\n------------\n\n    npm install cleanse\n\nWhy?\n----\n\nObjects are great in JavaScript, but they are not hashes.  If you are not\ncareful, or accept data from untrusted sources, it's possible to override\nprototype methods which can cause unwanted behavior.\n\nExample\n\n``` js\nvar d = {\n  x: 5,\n  toString: 'd'\n};\nconsole.log('%s', d);\n```\n\nUnder normal circumstances, this would print `[object Object]`, as the `%s` given\nto `console.log` is passed to `util.format`, which calls the `toString` method\nof the object given and substitutes in the data returned.\n\nHowever, because `toString` was overridden to be a string, it is now an error to\ncall `toString`, as it is no longer callable.  Running this code results in:\n\n```\nTypeError: Cannot convert object to primitive value\n    at String (<anonymous>)\n    at util.js:39:25\n    at String.replace (native)\n    at Console.exports.format (util.js:35:23)\n    at Console.log (console.js:53:34)\n    at repl:1:9\n    at REPLServer.self.eval (repl.js:110:21)\n    at repl.js:249:20\n    at REPLServer.self.eval (repl.js:122:7)\n    at Interface.<anonymous> (repl.js:239:12)\n```\n\nTake another example that mimics what you might see in a real-world node\nserver, and imagine the data was sent by a user being nefarious.\n\n``` js\nvar d = {\n  id: 5,\n  hasOwnProperty: 'foo'\n};\nif (!d.hasOwnProperty('id'))\n  console.log('property \"id\" must be supplied');\n```\n\nThe logic is innocent enough; the code is attempting to ensure that the\nuser supplied the `id` key in the data they sent.  However, because the\n\"user\" has overridden the `hasOwnProperty` property, this results in:\n\n```\nTypeError: Property 'hasOwnProperty' of object #<Object> is not a function\n    at repl:1:8\n    at REPLServer.self.eval (repl.js:110:21)\n    at repl.js:249:20\n    at REPLServer.self.eval (repl.js:122:7)\n    at Interface.<anonymous> (repl.js:239:12)\n    at Interface.EventEmitter.emit (events.js:95:17)\n    at Interface._onLine (readline.js:202:10)\n    at Interface._line (readline.js:531:8)\n    at Interface._ttyWrite (readline.js:760:14)\n    at ReadStream.onkeypress (readline.js:99:10)\n```\n\n---\n\nIn both of the examples given above, fatal errors were thrown that were not caught,\nwhich would result in the node program terminating.\n\nHow\n---\n\nThis module does not have a hardcoded list of reserved\nkeywords or inherited properties.  Instead, it looks inside an empty object\nto figure out which keywords are inherited, and which are safe to use.  That\nmeans this module will continue to work even if in the future it is decided\nthat more properties will be attached to the `Object` prototype and thus\nmade reserved.\n\nI liked the way [JSON5-utils](https://github.com/rlidwka/json5-utils)\nhandled this problem, but I didn't want to have to use a separate JSON\nparser just to get this functionality.\n\nUsage\n-----\n\n``` js\nvar cleanse = require('cleanse');\ncleanse(process.env);\n```\n\n### `cleanse(obj, behavior='ignore')`\n\n`cleanse` will recursively scan an object or array given and clean any and all\nreserved keys found in every object.  This method will also act as a noop if given\na string, number, boolean, etc. so it is safe to pass the returned data from\n`JSON.parse` without first checking its type.\n\n- `behavior`: specifies what to do with reserved keys\n  - `ignore`: (default) silently discard reserved keys\n  - `throw`: throw an error at the first reserved key found\n\n``` js\ncleanse({x: 5, hasOwnProperty: 'foo'});\n// => {x: 5}\ncleanse({x: 5, hasOwnProperty: 'foo'}, 'ignore')\n// => {x: 5}\n\n// throw will cause a SyntaxError to be thrown\ncleanse({x: 5, hasOwnProperty: 'foo'}, 'throw')\n// => SyntaxError: reserved keyword \"hasOwnProperty\" found in object\n```\n\nThis is useful for objects that have already been parsed for you,\nsuch as the output of `querystring.parse`, `req.headers`, `process.env`, etc.\n\n\n**Note:** the object is modified in place, so it is not necessary to capture\nthe returned variable.\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bahamas10/node-cleanse.git"
  },
  "scripts": {
    "test": "for f in test/*; do echo \"$f\"; node \"$f\" || exit 1; done; echo Passed; exit 0"
  },
  "version": "0.0.3"
}
